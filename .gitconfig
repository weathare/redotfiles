[include]
  path = ~/.git.local
[core]
  excludesfile = ~/.gitignore
  editor = nvim
[merge]
  tool = vimdiff
[mergetool]
  prompt = true
[mergetool "vimdiff"]
# ref: https://github.com/neovim/neovim/issues/2377#issuecomment-126092442
  path = nvim
[diff]
  tool = vimdiff
[difftool]
  prompt = false
[difftool "vimdiff"]
  path = nvim
[alias]
  alias = !git config --get-regexp '^alias\\.' | sed 's/alias\\.\\([^ ]*\\) \\(.*\\)/\t\\1\\\t => \\2/' | sort
  me = !git config --get-regexp user
  p = push
  st = status --short --branch
  sh = show
  so = remote show origin
  ft = fetch
  up = pull --rebase
  rb = rebase
  rbi = rebase -i
  ad = add -A
  ca = commit -a -m
  cm = commit -m
  cancel = !git commit -a -m 'Temporary commit for cancel' && git reset --hard HEAD~
  wip = "!f () { git add -A . && git commit -m \"WIP $1\"; }; f"
  co = checkout
# for branch
  br = branch             # originも含めたすべてのbranchを表示
  ba = branch -a
  bn = branch --no-merge  # mergeしてないbranchを
  refresh = !git fetch origin && git remote prune origin  # リモートブランチの同期
  bp = pull --prune
# for log
  ls = log --stat         # logに変更されたファイルも一緒に出す
  lp = log -p             # diffも一緒に出す
  lr = log origin
  lo = log --pretty=oneline --stat # logに変更されたファイルも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lg = log --graph --all --date=short --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  copy-reflog = !"git reflog --pretty='%h %gd %gs %an %ar' | fzf | awk -F ' ' '{ print $1, $2}'"
# for diff
  dm = diff master        # masterとのdiff
  dw = diff --color-words # wordごとに色つきdiff
  dc = diff --cached      # addされているものとdiff
  d1 = diff HEAD~
  d2 = diff HEAD~~
  d3 = diff HEAD~~~
  d4 = diff HEAD~~~~
  d5 = diff HEAD~~~~~
  d10 = diff HEAD^10
# for merge
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
# for grep
  gr = grep
  gn = grep -n
# hub alias
  pr = !hub pull-request
  pri = "!f() { hub pull-request -i $1 ; }; f"
  ppr = "!f() { git push origin $1 && hub pull-request ; }; f"
  open-list = !hub issue
[color]
  ui = auto
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
[credential]
# helper = cache --timeout=300
[iniit]
  templatedir = ~/.git_template
[push]
  default = matching
[credential]
  helper = store
[http]
  sslVerify = false
[ghq]
  root = ~/workspace/go/src

