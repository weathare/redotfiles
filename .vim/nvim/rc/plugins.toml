#======================================
# Utility
#
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
hook_source = 'source ~/.vim/nvim/rc/vimfiler.rc.vim'

[[plugins]]
repo = 'junegunn/fzf'
depends = 'fzf'
hook_source = 'source ~/.vim/nvim/rc/fzf.rc.vim'

repo = 'tsuyoshiwada/slack-memo-vim'
depends = 'mattn/webapi-vim'
hook_source = '''
if filereadable(expand('$HOME/.slack_memo_profile'))
  source $HOME/.slack_memo_profile
endif
'''
hook_add = '''
let g:slack_memo_bot_username = 'weathare'
let g:slack_memo_bot_icon_emoji = ':vim:'
nnoremap sme :split enew<CR>:set ft=markdown<CR>gI
nnoremap smp :SlackMemoPost<CR>
nnoremap sml :SlackMemoList<CR>:set modifiable<CR>
'''

[[plugins]]
repo = 'mattn/gist-vim'
depends = 'mattn/webapi-vim'
hook_add = '''
let g:github_user = "weathare"
'''

#=======================================
# Color
#
[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'popkirby/lightline-iceberg'
depends = ['lightline.vim', 'iceberg.vim']
hook_source = 'source ~/.vim/nvim/rc/color.rc.vim'

#======================================
# Git
#
[[plugins]]
repo = 'tpope/vim-git'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_enabled = 0

nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
  setlocal spell

  if a:info.vcs ==# 'git' && getline(1) ==# ''
    startinsert
  end

  imap <buffer><C-j>  <Plug>(committia-scroll-diff-down-half)
  imap <buffer><C-k>  <Plug>(committia-scroll-diff-up-half)
endfunction
'''

#======================================
# Helper
#
[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_if = 1

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = '''
map _ <Plug>(operator-replace)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = '''
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add = '''
nmap  <C-_> <Plug>(caw:hatpos:toggle)
vmap  <C-_> <plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

#======================================
# Lang
#
[[plugins]]
repo = 'rhysd/github-complete.vim'
on_ft = ['markdown', 'gitcommit']
hook_add = '''
let g:thub_complete_emoji_japanese_workaround = 1
'''

[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_functions = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = 'goimports'
let g:go_fmt_fail_silently = 1
let g:go_fmt_autosave = 0

au FileType go nmap ,gr <Plug>(go-run)
au FileType go nmap ,gb <Plug>(go-build)
au FileType go nmap ,gs <Plug>(go-test)
au FileType go nmap ,gc <Plug>(go-coverage)
'''

[[plugins]]
repo = 'vim-jp/vim-go-extra'
on_ft = 'go'

[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
on_i = 1
on_ft = 'go'

[[plugins]]
repo = 'scrooloose/syntastic'
on_i = 1
hook_add = '''
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {
    \ 'mode': 'passive',
    \ 'active_filetypes': ['go'],
    \ 'passive_filetypes': ['ruby'],
    \ }
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_css_checkers = ['stylint']
let g:syntastic_stylus_checkers = ['stylint']

nnoremap <Leader>sc :SyntasticCheck<CR>
nnoremap <Leader>st :SyntasticToggleMode<CR>
'''

[[plugins]]
repo = 'vim-ruby/vim-ruby'
depends = 'unite.vim'
on_ft = 'ruby'

[[plugins]]
repo = 'itmammoth/run-rspec.vim'
on_ft = 'ruby'
hook_add = '''
nnoremap ,rs :RunSpec<CR>
nnoremap ,rl :RunSpecLine<CR>
nnoremap ,re :RunSpecLastRun<CR>
'''

[[plugins]]
repo = 'basyura/unite-rails'

[[plugins]]
repo = 'osyo-manga/vim-monster'
on_ft = ['ruby', 'eruby']
hook_add = '''
let g:monster#completion#rcodetools#backend = "async_rct_complete"
'''

[[plugins]]
if = 'has("ruby")'
on_ft = 'ruby'
repo = 'fishbullet/deoplete-ruby'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'
hook_add = '''
autocmd BufNewFile,BufRead *.slim setlocal filetype=slim
'''

[[plugins]]
repo = 'tpope/vim-haml'
on_ft = 'haml'
hook_add = '''
autocmd BufNewFile,BufRead *.haml setlocal filetype=haml
'''

[[plugins]]
repo = 'AtsushiM/sass-compile.vim'
on_ft = 'css'
depends = 'search-parent.vim'
hook_add = '''
let g:sass_complite_auto = 0
let g:sass_complite_file = ['sass', 'scss']
let g:sass_complite_dir = ['css', 'stylesheets']
'''

[[plugins]]
repo = 'AtsushiM/search-parent.vim'

[[plugins]]
repo = 'stephenway/postcss.vim'
on_ft = 'css'

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
build = 'npm install -g tern'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'MaxMEllon/vim-jsx-pretty'
on_ft = ['javascript', 'javascript.jsx']
hook_source = '''
autocmd BufNewFile,BufRead *.jsx setlocal filetype=javascript.jsx
'''
